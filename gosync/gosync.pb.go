// Code generated by protoc-gen-go.
// source: gosync.proto
// DO NOT EDIT!

/*
Package gosync is a generated protocol buffer package.

It is generated from these files:
	gosync.proto

It has these top-level messages:
	GetEventsRequest
	GSMessage
	Session
	JoinRequest
	JoinReply
	PublishRequest
	PublishResult
*/
package gosync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetEventsRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *GetEventsRequest) Reset()                    { *m = GetEventsRequest{} }
func (m *GetEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventsRequest) ProtoMessage()               {}
func (*GetEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetEventsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type GSMessage struct {
	Time    int32  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *GSMessage) Reset()                    { *m = GSMessage{} }
func (m *GSMessage) String() string            { return proto.CompactTextString(m) }
func (*GSMessage) ProtoMessage()               {}
func (*GSMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Session struct {
	SessionId   string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionName string `protobuf:"bytes,2,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type JoinRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JoinReply struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *JoinReply) Reset()                    { *m = JoinReply{} }
func (m *JoinReply) String() string            { return proto.CompactTextString(m) }
func (*JoinReply) ProtoMessage()               {}
func (*JoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JoinReply) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type PublishRequest struct {
	Session *Session   `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Message *GSMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PublishRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *PublishRequest) GetMessage() *GSMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishResult struct {
}

func (m *PublishResult) Reset()                    { *m = PublishResult{} }
func (m *PublishResult) String() string            { return proto.CompactTextString(m) }
func (*PublishResult) ProtoMessage()               {}
func (*PublishResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*GetEventsRequest)(nil), "gosync.GetEventsRequest")
	proto.RegisterType((*GSMessage)(nil), "gosync.GSMessage")
	proto.RegisterType((*Session)(nil), "gosync.Session")
	proto.RegisterType((*JoinRequest)(nil), "gosync.JoinRequest")
	proto.RegisterType((*JoinReply)(nil), "gosync.JoinReply")
	proto.RegisterType((*PublishRequest)(nil), "gosync.PublishRequest")
	proto.RegisterType((*PublishResult)(nil), "gosync.PublishResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GoSync service

type GoSyncClient interface {
	JoinSession(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Session, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (GoSync_GetEventsClient, error)
	PublishEvent(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResult, error)
}

type goSyncClient struct {
	cc *grpc.ClientConn
}

func NewGoSyncClient(cc *grpc.ClientConn) GoSyncClient {
	return &goSyncClient{cc}
}

func (c *goSyncClient) JoinSession(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/gosync.GoSync/JoinSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSyncClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (GoSync_GetEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoSync_serviceDesc.Streams[0], c.cc, "/gosync.GoSync/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &goSyncGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoSync_GetEventsClient interface {
	Recv() (*GSMessage, error)
	grpc.ClientStream
}

type goSyncGetEventsClient struct {
	grpc.ClientStream
}

func (x *goSyncGetEventsClient) Recv() (*GSMessage, error) {
	m := new(GSMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goSyncClient) PublishEvent(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResult, error) {
	out := new(PublishResult)
	err := grpc.Invoke(ctx, "/gosync.GoSync/PublishEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoSync service

type GoSyncServer interface {
	JoinSession(context.Context, *JoinRequest) (*Session, error)
	GetEvents(*GetEventsRequest, GoSync_GetEventsServer) error
	PublishEvent(context.Context, *PublishRequest) (*PublishResult, error)
}

func RegisterGoSyncServer(s *grpc.Server, srv GoSyncServer) {
	s.RegisterService(&_GoSync_serviceDesc, srv)
}

func _GoSync_JoinSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSyncServer).JoinSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gosync.GoSync/JoinSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSyncServer).JoinSession(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSync_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoSyncServer).GetEvents(m, &goSyncGetEventsServer{stream})
}

type GoSync_GetEventsServer interface {
	Send(*GSMessage) error
	grpc.ServerStream
}

type goSyncGetEventsServer struct {
	grpc.ServerStream
}

func (x *goSyncGetEventsServer) Send(m *GSMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _GoSync_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSyncServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gosync.GoSync/PublishEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSyncServer).PublishEvent(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gosync.GoSync",
	HandlerType: (*GoSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinSession",
			Handler:    _GoSync_JoinSession_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _GoSync_PublishEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _GoSync_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("gosync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xed, 0x4a, 0x02, 0x41,
	0x14, 0x75, 0xc5, 0x94, 0xbd, 0x5a, 0xd6, 0x8d, 0x62, 0x11, 0x02, 0x1d, 0xfa, 0x61, 0x04, 0x12,
	0x46, 0x41, 0x50, 0x04, 0x42, 0x48, 0x45, 0x21, 0xeb, 0x03, 0xc4, 0xba, 0x0e, 0x3a, 0xe1, 0xcc,
	0x58, 0x33, 0x1b, 0xec, 0xcb, 0xf5, 0x6c, 0xd1, 0x7c, 0xac, 0xa5, 0xbf, 0xfc, 0x37, 0x73, 0xef,
	0xb9, 0x67, 0xce, 0x39, 0x77, 0xa0, 0x31, 0x93, 0x2a, 0x17, 0x69, 0x6f, 0xf9, 0x29, 0xb5, 0xc4,
	0xaa, 0xbd, 0x91, 0x3b, 0xd8, 0x1f, 0x52, 0xfd, 0xf0, 0x45, 0x85, 0x56, 0x31, 0xfd, 0xc8, 0xa8,
	0xd2, 0x78, 0x06, 0x35, 0x45, 0x95, 0x62, 0x52, 0x44, 0x41, 0x3b, 0xe8, 0xd6, 0xfb, 0xcd, 0x9e,
	0x9b, 0x1d, 0xdb, 0x72, 0xec, 0xfb, 0xe4, 0x06, 0xc2, 0xe1, 0xf8, 0x85, 0x2a, 0x95, 0xcc, 0x28,
	0x22, 0x54, 0x34, 0xe3, 0xd4, 0x0c, 0xed, 0xc4, 0xe6, 0x8c, 0x11, 0xd4, 0xb8, 0x6d, 0x47, 0x95,
	0x76, 0xd0, 0x0d, 0x63, 0x7f, 0x25, 0xcf, 0x50, 0x73, 0x74, 0x78, 0x02, 0xe0, 0x08, 0xdf, 0xd8,
	0xd4, 0x8c, 0x87, 0x71, 0xe8, 0x2a, 0x8f, 0x53, 0xec, 0x40, 0xc3, 0xb7, 0x45, 0xc2, 0x69, 0x54,
	0x36, 0x80, 0xba, 0xab, 0xbd, 0x26, 0x9c, 0x92, 0x0e, 0xd4, 0x9f, 0x24, 0x13, 0xde, 0x01, 0x42,
	0xc5, 0x20, 0x2d, 0x95, 0x39, 0x93, 0x6b, 0x08, 0x2d, 0x64, 0xb9, 0xc8, 0xb7, 0xb1, 0x38, 0x87,
	0xbd, 0x51, 0x36, 0x59, 0x30, 0x35, 0xdf, 0x3e, 0x1f, 0x3c, 0x5f, 0xd9, 0x2f, 0x1b, 0xe8, 0x81,
	0x87, 0x16, 0xb1, 0xad, 0x12, 0x69, 0xc2, 0x6e, 0xf1, 0x92, 0xca, 0x16, 0xba, 0xff, 0x1d, 0x40,
	0x75, 0x28, 0xc7, 0xb9, 0x48, 0xf1, 0xca, 0x1a, 0xf4, 0x89, 0x1d, 0x7a, 0x9a, 0x3f, 0xae, 0x5b,
	0xeb, 0x32, 0x48, 0x09, 0x6f, 0x21, 0x2c, 0xd6, 0x8b, 0x51, 0xf1, 0xf6, 0xda, 0xc6, 0x5b, 0x9b,
	0xaa, 0x48, 0xe9, 0x22, 0xc0, 0x7b, 0x68, 0x38, 0x41, 0x06, 0x8e, 0xc7, 0x1e, 0xf6, 0x3f, 0x90,
	0xd6, 0xd1, 0x46, 0xfd, 0x57, 0x3e, 0x29, 0x0d, 0x4e, 0x21, 0x72, 0x9d, 0xf7, 0x24, 0x57, 0xa9,
	0xe4, 0xcb, 0x4c, 0x33, 0x31, 0xeb, 0xa5, 0x92, 0x0f, 0x9c, 0xb3, 0x51, 0x30, 0xa9, 0x9a, 0x2f,
	0x79, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x61, 0x48, 0x6b, 0xa2, 0x02, 0x00, 0x00,
}
